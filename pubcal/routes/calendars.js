"use strict";
const express = require('express');
const router = express.Router();
const CalendarClient = require('../models/calendars');
const helper = require('../libs/icalGeneratorHelper');

//Get particular by id
//Get /calendars/:id
router.get('/:id', (req, res)=> {
    let id = req.params.id;

    //TODO: WE don't want to return ALL fields of calendar object(ie user doesn't need to know filepath, user_subscribed etc...)
    CalendarClient.getCalendarById(id).then((calendar)=> {
        res.send(calendar);
    });
});

//Get index of calendars
//GET /calendars/
router.get('/', (req, res) => {
    res.send('GET list of calendars');
});

//Get form for creating a calendar
//GET /calendars/new
router.get('/new', (req, res) => {
    res.render('createCalendar');
});

//Send calendar data to create a new calendar
//POST /calendars/new
router.post('/new', (req, res) => {
    // TODO: check if calendar is in the body
    let calendar = req.body.calendar;
    console.log(calendar);

    let createCalendarFile = new Promise((resolve, reject) => {
        let filepath = helper.createCalendar(calendar);
        resolve(filepath);
    }).then((filepath)=> {

        //Construct list of subscribed users
        calendar.users_subscribed = [];
        //Add creator as a subscriber
        calendar.users_subscribed.push(calendar.created_by);
        //Add filepath generated by helper
        calendar.filepath = filepath;

        CalendarClient.addCalendar(calendar)
            .then((result) => {
                if (result.result.ok == 1) {
                    res.json({"status": "success", "id": result.insertedId});
                } else {
                    console.error("Failed inserting new calendar into db");
                    res.json({"status": "failed"});
                }
            })

    });


});


//POST /calendars/search
router.post('/search', (req, res) => {
    let tag = req.body.tag;
    UserClient.searchForCalendars(tag, (result) => {
        if (!result.length) { // not found
            res.render('index_sample', {
                errors: 'no calendar matches your request'
            });
        } else {
            res.render('calendar_result_sample', {
                calendarResult: JSON.stringify(result)
            });
        }
    })
});

//Update a calendar by id
//PUT /calendars/:id
router.put('/:id', (req, res) => {
    let id = req.params.id;
    let calendar = req.body.calendar;

    CalendarClient.getCalendarById(id).then((oldCalendar)=> {
        //Get old calendar, copy its users and filepath, since we want to preserve this information
        //and frontend doesn't send this to us(for security)
        calendar.users_subscribed = oldCalendar.users_subscribed.slice();
        calendar.filepath = oldCalendar.filepath;
        return calendar;
    }).then((newCalendar)=> {
        //Replace calendar object in the database first, newCalendar contains copied users and filepath
        CalendarClient.replaceCalendar(id, newCalendar)
            .then((result) => {
                if (result.modifiedCount == 1) {
                    //We are NOT doing upsert, so if modifiedCount >0, means that there was an actual record
                    //that we modified which is good
                    new Promise((resolve, reject)=> {
                        //We want to create a new ical file on the disk with the same filepath(filename) as
                        let filepath = helper.createCalendar(newCalendar, newCalendar.filepath);
                        resolve(filepath);
                    }).then((filepath)=> {
                        if (filepath === newCalendar.filepath)
                            res.json({"status": "success", "id": id});
                        else {
                            //Something went horribly wrong
                            console.log("ERROR: Promise returned a different filepath than expected");
                            res.json({"status": "failed"});
                        }
                    }).catch((err)=> {
                        console.log("ERROR: Failed on promise to update file: " + err);
                        res.json({"status": "failed"});
                    });
                } else {
                    //We didn't find any documents with such id in the database
                    console.log("ERROR: failed to update calendar in database");
                    res.json({"status": "failed"});
                }
            });
    });

});

//DELETE /calendars/:id
router.delete('/:id', (req, res) => {
    let filter = req.body.filter;
    UserClient.removeCalendar(filter)
        .then((result) => {
            if (result) {
                // TODO: RENDER SUCCESS MESSAGE
                res.render();
            }
        });
});

// GET a calendar with id
//GET /calendars/:id
router.get('/:id', (req, res) => {
    res.send('GET calendar with id' + req.params.id);
});

module.exports = router;
